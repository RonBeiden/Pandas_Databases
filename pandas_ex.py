# -*- coding: utf-8 -*-
"""pandas_ex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TiYnOap3FS56rPGD-w99msOZPHUi3VXm

**import**
"""

import pandas as pd 
import re
import numpy as np
import datetime

df = pd.read_csv('/content/hero-network.csv')
df_nodes = pd.read_csv('/content/nodes.csv')
df_earthquakes = pd.read_csv('/content/earthquakes.csv')
df_fifa = pd.read_csv('/content/fifa.csv')

"""A: 1"""

hero1 = []
total = []
for i in df.hero1:
    hero1.append(i)
hero2 = []
for j in df.hero2:
  hero2.append(j)
total_heroes = hero1 + hero2
coloum_name_hero = ["hero","count"]
df_total = pd.DataFrame(columns=coloum_name_hero)
df_total["hero"] = total_heroes
df_total["count"] = 1
df_heroes =  df_total.groupby(["hero"]).count()["count"]
df_heroes = df_heroes.to_frame()
df_heroes1 = df_heroes.loc[df_heroes["count"] == 1]
df_heroes2 = df_heroes.loc[df_heroes["count"] == 2]
df_heroes2 = df_heroes2.drop(columns= ["count"])
listtt = df_heroes2.index.tolist()
for k in listtt:
  if (k in hero1) and (k in hero2):
   if df.loc[df.hero1 == k,"hero2"].values[0] == df.loc[df.hero2 == k,"hero1"].values[0]:
      total.append(k)
print(len(df_heroes1) + len(total))

"""A: 2"""

ironman_f = df.loc[df["hero1"] == "IRON MAN ARMOR"]
ironman_list = ironman_f["hero2"].values.tolist()
spider_f = df.loc[df["hero1"] == "SPIDER-MAN/PETER PAR"]
spider_list = spider_f["hero2"].values.tolist()
captain_f = df.loc[df["hero1"] == "CAPTAIN AMERICA"]
captain_list = captain_f["hero2"].values.tolist()
common_friends_s_and_c = []
common_friends_total = []
for i in spider_list:
  for j in captain_list:
    if i == j and i not in common_friends_s_and_c:
      common_friends_s_and_c.append(i)
for k in common_friends_s_and_c:
  for p in ironman_list:
    if k == p and k not in common_friends_total:
      common_friends_total.append(k)
print(len(common_friends_total))

"""A: 3"""

df_nodes_hero = df_nodes.loc[df_nodes["type"] == "hero"]
lenght = df_nodes_hero["node"].str.len()
argmax = np.where(lenght == lenght.max())[0]
argmin = np.where(lenght == lenght.min())[0]
print("max lenght:")
print(df_nodes_hero.iloc[argmax])
print("min lenght:")
print(df_nodes_hero.iloc[argmin])

"""A: 4"""

def my_friends_not_CA(name):
 spider_f =df.loc[df["hero1"] == name]
 spider_list = spider_f["hero2"].values.tolist()
 captain_f = df.loc[df["hero1"] == "CAPTAIN AMERICA"]
 captain_list = captain_f["hero2"].values.tolist()
 common_friends_list = []
 for i in spider_list:
   for j in captain_list:
     if i != j and i not in common_friends_list:
       common_friends_list.append(i)
 return len(common_friends_list)
print(my_friends_not_CA("SPIDER-MAN/PETER PAR"))

"""A: 5"""

spider_f =df.loc[df["hero1"] == "SPIDER-MAN/PETER PAR"]
spider_list = spider_f["hero2"].values.tolist()
all_friends_list = []
friends_df = None
friend_list = []
for i in spider_list:
 friends_df = df.loc[df["hero1"] == i]
 friend_list = friends_df["hero2"].values.tolist()
 for j in friend_list:
   if j not in all_friends_list:
     all_friends_list.append(j)
 friends_df = None
 friend_list = []
print(len(all_friends_list))

"""B: 1"""

strenght = df_earthquakes["Magnitude"]
argmax = np.where(strenght == strenght.max())[0]
print(df_earthquakes.iloc[argmax])

"""B: 2"""

df_nuclear_all = df_earthquakes.loc[df_earthquakes["Type"] == "Nuclear Explosion"]
df_nuclear_all["Magnitude"].median()

"""B: 3"""

df_EQ_year5 = df_earthquakes["Magnitude"] > 5.0
df_eq_Year = df_earthquakes[df_EQ_year5]
df_eq_Year["Year"] = df_earthquakes["Date"].apply(lambda x: str(x) [6:])
yearMAX = df_eq_Year.groupby("Year")
add = yearMAX["Year"].count() == max(yearMAX["Year"].count()) 
add2 = add[add == True]
print("Year with more earthquakes stronger than 5 magnitude: ")
print(add2.view)

df_EQ_year8 = df_earthquakes["Magnitude"] > 8.0
df_eq_Year = df_earthquakes[df_EQ_year8]
df_eq_Year["Year"] = df_earthquakes["Date"].apply(lambda x: str(x) [6:])
yearMAX = df_eq_Year.groupby("Year")
add = yearMAX["Year"].count() == max(yearMAX["Year"].count()) 
add2 = add[add == True]
print("Year with more earthquakes stronger than 8 magnitude: ")
print(add2)

"""B: 4"""

df_temp = df_earthquakes
df_temp["count"] = 1
df_temp["Hour"] = df_temp["Time"].apply(lambda x: str (x) [:2])
df_time = df_temp.groupby(["Hour"]).count()["count"] 
df_time = df_time.sort_values(ascending=True)
df_time = df_time.to_frame()
total = df_time["count"]
argmax = np.where(total == total.max())[0]
print(df_time.iloc[argmax])

"""C: 1"""

def strongest(state):
  df_state = df_fifa.loc[df_fifa["Nationality"] == state]
  strong = df_state["Overall"]
  argmax = np.where(strong == strong.max())[0]
  return df_state.iloc[argmax]
print("The strongest player in Brazil is: ")
print(strongest("Brazil"))
print("The strongest player in France is: ")
print(strongest("France"))

"""C: 2"""

def club_strenght(club_name):
  df_club = df_fifa.loc[df_fifa["Club"] == club_name]
  avg_OVR = df_club["Overall"].mean()
  return avg_OVR
print("The average overall of FC Barcelona is: ")
print(club_strenght("FC Barcelona"))